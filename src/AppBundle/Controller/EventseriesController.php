<?php

namespace AppBundle\Controller;

use AppBundle\Entity\Event;
use AppBundle\Entity\Eventseries;
use AppBundle\Service\FileUploader;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;

/**
 * Class EventseriesController
 * @package AppBundle\Controller
 * @Route("eventseries")
 */
class EventseriesController extends ContentController
{
    protected function getModelClass()
    {
        return Eventseries::class; // TODO: Change the autogenerated stub
    }

    /**
     * @Route("/", name="eventseries_index")
     * @Method("GET")
     */
    public function indexAction()
    {
        return parent::indexAction();
    }

    /**
     * @Route("/new", name="eventseries_new")
     * @Method({"GET", "POST"})
     */
    public function newAction(Request $request, FileUploader $fileUploader)
    {
        return parent::newAction($request, $fileUploader);
    }

    /**
     * @Route("/{id}", name="eventseries_show")
     * @Method("GET")
     */
    public function showAction(Eventseries $eventseries)
    {
        $deleteForm = $this->createDeleteForm($eventseries);
        $eventRepo = $this->getDoctrine()->getRepository(Event::class);
        $nextEvent = $eventRepo->findOneBy([
            'series' => $eventseries
        ]);
        return $this->render($this->getModelName() . '/show.html.twig', array_merge($this->getParams(), [
            'model' => $eventseries,
            'delete_form' => $deleteForm->createView(),
            'nextEvent' => $nextEvent
        ]));
    }

    /**
     * @Route("/{id}/edit", name="eventseries_edit")
     * @Method({"GET", "POST"})
     */
    public function editAction(Request $request, Eventseries $eventseries, FileUploader $fileUploader)
    {
        return parent::edit($request, $eventseries, $fileUploader);
    }

    /**
     * @Route("/{id}", name="eventseries_delete")
     * @Method("DELETE")
     */
    public function deleteAction(Request $request, Eventseries $eventseries)
    {
        return parent::delete($request, $eventseries);
    }
}
